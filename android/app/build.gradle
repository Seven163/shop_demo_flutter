def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"
def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file('key.properties')
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

android {
    compileSdkVersion 28

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    lintOptions {
        disable 'InvalidPackage'
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId "com.z.tec.baixing" // 项目app的包名
        minSdkVersion 21 // app最低兼容到的版本号
        targetSdkVersion 28 // 指定打包用的版本号，
        versionCode flutterVersionCode.toInteger() // 发布的版本号，读取flutter中的
        versionName flutterVersionName // 发布时的版本名
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        // 选择要添加的对应 cpu 类型的 .so 库。
        ndk {
            // abiFilters "arm64-v8a", "x86_64", "x86"
            abiFilters 'armeabi', 'armeabi-v7a', 'arm64-v8a', 'x86_64', 'mips', 'mips64'
        }
        
        // 极光推送配置
        manifestPlaceholders = [
            JPUSH_PKGNAME : applicationId,
            JPUSH_APPKEY : "d2a93e6b6822a25d1215f504", // NOTE: JPush 上注册的包名对应的 Appkey.
            JPUSH_CHANNEL : "developer-default", //暂时填写默认值即可.
            AMAP_KEY : "1c2f3c4f7d0bcf35c20da3b0d4e53958", /// 高德地图key
        ]
    }

    signingConfigs {
        release {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile keystoreProperties['storeFile'] ? file(keystoreProperties['storeFile']) : null
            storePassword keystoreProperties['storePassword']
        }
        // debug {
        //     keyAlias "androiddebugkey"
        //     keyPassword "111111"
        //     storeFile file('../debug.keystore')
        //     storePassword "111111"
        // }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release
            shrinkResources true // 启动资源压缩,删除无用资源
            minifyEnabled true // 开启混淆/压缩
            useProguard true

            // zipAlignEnabled true
            // debuggable true
            
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    //    debug {
    //        signingConfig signingConfigs.release
    //    }
    }

//    packagingOptions {
//        // 确保app与asr_plugin都依赖的libflutter.so 合并时不冲突
//        pickFirst 'lib/x86_64/libflutter.so'
//        pickFirst 'lib/x86/libflutter.so'
//        pickFirst 'lib/arm64-v8a/libflutter.so'
//    }
}

flutter {
    source '../..'
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test:runner:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.1'
    // amap_location插件依赖
    implementation 'com.amap.api:location:latest.integration'
}
