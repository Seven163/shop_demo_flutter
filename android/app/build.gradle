def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"
def keystorePropertiesFile = rootProject.file("key.properties")
def keystoreProperties = new Properties()
keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

android {
    compileSdkVersion 28 // app编译版本，如果有老代码会做提示

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    lintOptions {
        disable 'InvalidPackage'
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId "com.example.baixing" // 项目app的包名
        minSdkVersion 28 // app最低兼容到的版本号，16是兼容到4.2，具体可以在软件中看
        targetSdkVersion 28 // 指定打包用的版本号，
        versionCode flutterVersionCode.toInteger() // 发布的版本号，读取flutter中的
        versionName flutterVersionName // 发布时的版本名
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        // ndk {
        //     abiFilters "arm64-v8a", "x86_64", "x86"  // 只打包flutter所支持的架构
        // }
    }

    signingConfigs {
        release {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
        }
    }

    buildTypes {
        release {
            // signingConfig signingConfigs.debug
            signingConfig signingConfigs.release
            // 开启混淆/压缩
            minifyEnabled true
            // useProguard true // 关闭此项

            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
//    packagingOptions {
//        // 确保app与asr_plugin都依赖的libflutter.so 合并时不冲突
//        pickFirst 'lib/x86_64/libflutter.so'
//        pickFirst 'lib/x86/libflutter.so'
//        pickFirst 'lib/arm64-v8a/libflutter.so'
//    }
}

flutter {
    source '../..'
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test:runner:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.1'
    // 百度语音插件引用
    // implementation project(':asr_plugin')
}
